[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opinionated-mixins"
dynamic = ["version"]
description = 'Opinionated set of mixins. Implemented in Pydantic, SQLAlchemy, MongoEngine, ODMantic, etc.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Hasan Sezer Taşan", email = "hasansezertasan@gmail.com" }]
classifiers = [
  "Development Status :: 1 - Planning",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Typing :: Typed",
  'Environment :: Web Environment',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  'Programming Language :: Python :: 3.12',
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/hasansezertasan/opinionated-mixins#readme"
Issues = "https://github.com/hasansezertasan/opinionated-mixins/issues"
Source = "https://github.com/hasansezertasan/opinionated-mixins"

[tool.hatch.version]
path = "src/opinionated_mixins/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "pre-commit >=2.20.0, <4.0.0",
  "pydantic",
  "sqlalchemy",
  "mongoengine",
  "odmantic",
  "beanie",
  "wtforms",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
pre = "pre-commit run --all-files --hook-stage manual --show-diff-on-failure"

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
  "ruff==0.3.7",
  "sqlalchemy-stubs>=0.4",
  "types-WTForms>=3.1",
]
[tool.hatch.envs.types.scripts]
typing = "mypy --install-types --non-interactive {args:src/opinionated_mixins}"
style = ["ruff check {args:.}"]
format = ["ruff format {args:.}"]
all = ["typing", "style", "format"]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "alembic",
  "migrations",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

# Extra
show-fixes = true
extend-include = ["*.ipynb"]
fix = true


[tool.ruff.lint]
select = [
  # All Available Linters
  "F", # Pyflakes
  # "E/W", # pycodestyle
  # Custom Start
  "E",  # pycodestyle errors
  "E4",
  "E7",
  "E9",
  "W",  # pycodestyle warnings
  # Custom End
  "C90",   # mccabe
  "I",     # isort
  "N",     # pep8-naming
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "TRIO",  # flake8-trio
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  # Custom Start
  "B9",
  # Custom End
  "A", # flake8-builtins
  # "COM", # flake8-commas
  "CPY", # flake8-copyright
  "C4",  # flake8-comprehensions
  # Custom Start
  "C", # flake8-comprehensions
  # Custom End
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "DJ",  # flake8-django
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  # "FA",  # flake8-future-annotations
  # "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G",   # flake8-logging-format
  # "INP", # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "TD",   # flake8-todos
  "FIX",  # flake8-fixme
  "ERA",  # eradicate
  "PD",   # pandas-vet
  # "PGH", # pygrep-hooks
  # "PL",  # Pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # Ruff-specific rules
]
ignore = [
  "E501", # line too long, handled by black
  "E402", # module level import not at top of file
  "W191", # indentation contains tabs
  "F401", # imported but unused
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Extra
preview = true
ignore-init-module-imports = true


[tool.ruff.lint.flake8-copyright]
author = "Hasan Sezer Taşan <hasansezertasan@gmail.com>"


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.ruff.lint.isort]
known-third-party = ["opinionated_mixins"]


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.mypy]
strict = true
pretty = true
follow_imports = "silent"
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true


[tool.coverage.run]
source_pkgs = ["opinionated_mixins", "tests"]
branch = true
parallel = true
omit = ["src/opinionated_mixins/__about__.py"]


[tool.coverage.paths]
opinionated_mixins = [
  "src/opinionated_mixins",
  "*/opinionated-mixins/src/opinionated_mixins",
]
tests = ["tests", "*/opinionated-mixins/tests"]


[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
